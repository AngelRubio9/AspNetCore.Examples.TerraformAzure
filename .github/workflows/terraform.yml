name: Default

on:
  push:
    branches: [ "main" ]
  pull_request:

permissions:
  contents: read

jobs:
  create_basic_infrastructure:
    name: Create Basic Infrastructure
    runs-on: ubuntu-latest
    environment: default

    env:
        AZURE_CREDENTIALS: >- 
            {
                "subscriptionId": "${{ vars.AZ_SUBSCRIPTION_ID }}",
                "tenantId": "${{ vars.AZ_TENANT_ID }}"
                "clientId": "${{ vars.AZ_SERVICE_PRINCIPAL_APP_ID }}",
                "clientSecret": "${{ secrets.AZ_SERVICE_PRINCIPAL_SECRET }}"
            }

    steps:
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ env.AZURE_CREDENTIALS }}

  terraform:
    name: Deploy Infrastructure with Terraform
    runs-on: ubuntu-latest
    environment: default

    env:
        TF_VAR_azurerm_subscription_id: ${{ vars.AZ_SUBSCRIPTION_ID }}
        TF_VAR_azurerm_tenant_id: ${{ vars.AZ_TENANT_ID }}
        TF_VAR_azurerm_client_id: ${{ vars.AZ_SERVICE_PRINCIPAL_APP_ID }}
        TF_VAR_azurerm_client_secret: ${{ secrets.AZ_SERVICE_PRINCIPAL_SECRET }}
        TF_VAR_resource_group_name: ${{ vars.AZ_RESOURCE_GROUP_NAME }}
        TF_VAR_resource_group_location: ${{ vars.AZ_RESOURCE_GROUP_LOCATION }}
        TF_VAR_storage_account_name: ${{ vars.AZ_STORAGE_ACCOUNT_NAME }}

    steps:

    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest compatible version of Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2.0.3
      with:
        terraform_version: ~>1.5

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      working-directory: ./terraform
      run: >- 
        terraform init 
        -backend-config="subscription_id=${{ vars.AZ_SUBSCRIPTION_ID }}"
        -backend-config="tenant_id=${{ vars.AZ_TENANT_ID }}"
        -backend-config="client_id=${{ vars.AZ_SERVICE_PRINCIPAL_APP_ID }}"
        -backend-config="client_secret=${{ secrets.AZ_SERVICE_PRINCIPAL_SECRET }}"
        -backend-config="resource_group_name=${{ vars.AZ_RESOURCE_GROUP_NAME }}"
        -backend-config="storage_account_name=${{ vars.AZ_STORAGE_ACCOUNT_NAME }}"

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      working-directory: ./terraform
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      working-directory: ./terraform
      run: terraform plan -input=false

    # On push to "main", build or change infrastructure according to Terraform configuration files
    - name: Terraform Apply
      working-directory: ./terraform
      run: terraform apply -auto-approve -input=false