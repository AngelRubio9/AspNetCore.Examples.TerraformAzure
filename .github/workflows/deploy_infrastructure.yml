name: Deploy Terraform

on:
  # Call from other workflows
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
    
permissions:
  # Only allow to read repo content
  contents: read
  # Allow to write tokens for Azure Login OIDC
  id-token: write

jobs:
  # deploy_prerrequisites:
  #   name: Deploy prerrequisites for Terraform
  #   runs-on: ubuntu-latest
  #   environment: ${{ inputs.environment }}

  #   steps:

  #   # Azure Login using service principal with OIDC
  #   # https://github.com/marketplace/actions/azure-login#login-with-openid-connect-oidc-recommended
  #   - name: Azure login
  #     uses: azure/login@v2
  #     with:
  #       subscription-id: ${{ vars.AZ_SUBSCRIPTION_ID }}
  #       tenant-id: ${{ vars.AZ_TENANT_ID }}
  #       client-id: ${{ vars.AZ_SERVICE_PRINCIPAL_APP_ID }}

  #   - name: Create Resource Group
  #     uses: azure/CLI@v1
  #     with:
  #       azcliversion: 2.30.0
  #       inlineScript: |
  #           if [ $(az group exists --name ${{ vars.AZ_RESOURCE_GROUP_NAME }}) = false ]; then
  #               echo Creating resource group...
  #               az group create --name ${{ vars.AZ_RESOURCE_GROUP_NAME }} --location ${{ vars.AZ_RESOURCE_GROUP_LOCATION }}
  #               echo Resource group created.
  #           else
  #               echo Resource group already exists.
  #           fi

  #   - name: Create Storage Account
  #     uses: azure/CLI@v1
  #     with:
  #       azcliversion: 2.30.0
  #       inlineScript: |
  #           if [ $(az storage account list --query "[?name == '${{ vars.AZ_STORAGE_ACCOUNT_NAME }}'] | length(@)") = 0 ]; then
  #               echo Creating storage account...
  #               az storage account create --name ${{ vars.AZ_STORAGE_ACCOUNT_NAME }} --resource-group ${{ vars.AZ_RESOURCE_GROUP_NAME }} --location ${{ vars.AZ_RESOURCE_GROUP_LOCATION }}
  #               echo Storage account created.
  #           else
  #               echo Storage account already exists.
  #           fi

  #   - name: Create Storage Container
  #     uses: azure/CLI@v1
  #     with:
  #       azcliversion: 2.30.0
  #       inlineScript: |
  #           if [ $(az storage container exists --account-name ${{ vars.AZ_STORAGE_ACCOUNT_NAME }} --name tfstate --only-show-errors --query "exists") = false ]; then
  #               echo Creating storage container...
  #               az storage container create --account-name ${{ vars.AZ_STORAGE_ACCOUNT_NAME }} --name tfstate --only-show-errors
  #               echo Storage container created.
  #           else
  #               echo Storage container already exists.
  #           fi

  deploy_terraform:
    name: Deploy infrastructure with Terraform
    # needs: [deploy_prerrequisites]
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    env:
        TF_VAR_azurerm_subscription_id: ${{ vars.AZ_SUBSCRIPTION_ID }}
        TF_VAR_azurerm_tenant_id: ${{ vars.AZ_TENANT_ID }}
        TF_VAR_azurerm_client_id: ${{ vars.AZ_SERVICE_PRINCIPAL_APP_ID }}
        TF_VAR_resource_group_name: ${{ vars.AZ_RESOURCE_GROUP_NAME }}
        TF_VAR_resource_group_location: ${{ vars.AZ_RESOURCE_GROUP_LOCATION }}
        TF_VAR_storage_account_name: ${{ vars.AZ_STORAGE_ACCOUNT_NAME }}
        TF_VAR_container_registry_name: ${{ vars.AZ_CONTAINER_REGISTRY_NAME }}
        TF_VAR_service_plan_name: ${{ vars.AZ_SERVICE_PLAN_NAME }}
        TF_VAR_linux_web_app_name: ${{ vars.AZ_LINUX_WEB_APP_NAME }}
        TF_VAR_docker_web_app_name: ${{ vars.AZ_DOCKER_WEB_APP_NAME }}
        TF_VAR_container_app_env_name: ${{ vars.AZ_CONTAINER_APP_ENV_NAME }}
        TF_VAR_container_app_name: ${{ vars.AZ_CONTAINER_APP_NAME }}

    steps:

    - name: Checkout
      uses: actions/checkout@v3

    # Azure Login using service principal with OIDC
    # https://github.com/marketplace/actions/azure-login#login-with-openid-connect-oidc-recommended
    - name: Azure login
      uses: azure/login@v2
      with:
        subscription-id: ${{ vars.AZ_SUBSCRIPTION_ID }}
        tenant-id: ${{ vars.AZ_TENANT_ID }}
        client-id: ${{ vars.AZ_SERVICE_PRINCIPAL_APP_ID }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ~>1.7.5

    - name: Terraform Init
      working-directory: ./terraform
      run: >- 
        terraform init      
        -backend-config="subscription_id=${{ vars.AZ_SUBSCRIPTION_ID }}"
        -backend-config="tenant_id=${{ vars.AZ_TENANT_ID }}"
        -backend-config="client_id=${{ vars.AZ_SERVICE_PRINCIPAL_APP_ID }}"
        -backend-config="resource_group_name=${{ vars.AZ_RESOURCE_GROUP_NAME }}"
        -backend-config="storage_account_name=${{ vars.AZ_STORAGE_ACCOUNT_NAME }}"

    - name: Terraform Format
      working-directory: ./terraform
      run: terraform fmt -check

    - name: Check if prerrequisites are in state
      id: check_prerrequisites
      working-directory: ./terraform
      run: |
        rg_imported=$(terraform state list | { grep azurerm_resource_group.rg || true; })
        echo rg_imported: $rg_imported
        echo "rg_imported=rg_imported" >> "$GITHUB_OUTPUT"
        sa_imported=$(terraform state list | { grep azurerm_storage_account.st || true; })
        echo sa_imported: $sa_imported
        echo "sa_imported=$sa_imported" >> $GITHUB_OUTPUT
        sc_imported=$(terraform state list | { grep azurerm_storage_container.tfstate || true; })
        echo sc_imported: $sc_imported
        echo "sc_imported=$sc_imported" >> $GITHUB_OUTPUT

    # Import newly created prerrequisite resources
    - name: Terraform Import Resource Group
      if: ${{ steps.check_prerrequisites.outputs.rg_imported == '' }}
      working-directory: ./terraform
      run: terraform import azurerm_resource_group.rg /subscriptions/${{ vars.AZ_SUBSCRIPTION_ID }}/resourceGroups/${{ vars.AZ_RESOURCE_GROUP_NAME }}
    - name: Terraform Import Storage Account
      if: ${{ steps.check_prerrequisites.outputs.sa_imported == '' }}
      working-directory: ./terraform
      run: terraform import azurerm_storage_account.st /subscriptions/${{ vars.AZ_SUBSCRIPTION_ID }}/resourceGroups/${{ vars.AZ_RESOURCE_GROUP_NAME }}/providers/Microsoft.Storage/storageAccounts/${{ vars.AZ_STORAGE_ACCOUNT_NAME }}
    - name: Terraform Import Storage Container
      if: ${{ steps.check_prerrequisites.outputs.sc_imported == '' }}
      working-directory: ./terraform
      run: terraform import azurerm_storage_container.tfstate https://${{ vars.AZ_STORAGE_ACCOUNT_NAME }}.blob.core.windows.net/tfstate

    - name: Terraform Apply
      working-directory: ./terraform
      run: terraform apply -auto-approve -input=false