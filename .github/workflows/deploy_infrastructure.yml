name: Deploy Terraform

on:
  # Call from other workflows
  workflow_call:
    inputs:
      environment:
        required: true
        type: string

# Only allow to read repo content
permissions:
  contents: read

jobs:
  deploy_prerrequisites:
    name: Deploy prerrequisites for Terraform
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    outputs:
        # New resources were created
        resource_group_created: ${{ steps.create_resource_group.outputs.created }}
        storage_account_created: ${{ steps.create_storage_account.outputs.created }}
        storage_container_created: ${{ steps.create_storage_container.outputs.created }}

    steps:

    # Azure Login using service principal
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: >-
            {
                "subscriptionId": "${{ vars.AZ_SUBSCRIPTION_ID }}",
                "tenantId": "${{ vars.AZ_TENANT_ID }}",
                "clientId": "${{ vars.AZ_SERVICE_PRINCIPAL_APP_ID }}",
                "clientSecret": "${{ secrets.AZ_SERVICE_PRINCIPAL_SECRET }}"
            }

    # Creates resource group if not exists
    - name: Create Resource Group
      id: create_resource_group
      uses: azure/CLI@v1
      with:
        azcliversion: 2.30.0
        inlineScript: |
            if [ $(az group exists --name ${{ vars.AZ_RESOURCE_GROUP_NAME }}) = false ]; then
                az group create --name ${{ vars.AZ_RESOURCE_GROUP_NAME }} --location ${{ vars.AZ_RESOURCE_GROUP_LOCATION }}
                echo "created=true" >> "$GITHUB_OUTPUT"
            fi

    # Creates storage account if not exists
    - name: Create Storage Account
      id: create_storage_account
      uses: azure/CLI@v1
      with:
        azcliversion: 2.30.0
        inlineScript: |
            if [ $(az storage account list --query "[?name == '${{ vars.AZ_STORAGE_ACCOUNT_NAME }}'] | length(@)") = 0 ]; then
                az storage account create --name ${{ vars.AZ_STORAGE_ACCOUNT_NAME }} --resource-group ${{ vars.AZ_RESOURCE_GROUP_NAME }} --location ${{ vars.AZ_RESOURCE_GROUP_LOCATION }}
                echo "created=true" >> "$GITHUB_OUTPUT"
            fi

    # Creates storage container if not exists
    - name: Create Storage Container
      id: create_storage_container
      uses: azure/CLI@v1
      with:
        azcliversion: 2.30.0
        inlineScript: |
            if [ $(az storage container exists --account-name ${{ vars.AZ_STORAGE_ACCOUNT_NAME }} --name tfstate --only-show-errors --query "exists") = false ]; then
                az storage container create --account-name ${{ vars.AZ_STORAGE_ACCOUNT_NAME }} --name tfstate --only-show-errors
                echo "created=true" >> "$GITHUB_OUTPUT"
            fi

  deploy_terraform:
    name: Deploy infrastructure with Terraform
    needs: [deploy_prerrequisites]
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    env:
        TF_VAR_azurerm_subscription_id: ${{ vars.AZ_SUBSCRIPTION_ID }}
        TF_VAR_azurerm_tenant_id: ${{ vars.AZ_TENANT_ID }}
        TF_VAR_azurerm_client_id: ${{ vars.AZ_SERVICE_PRINCIPAL_APP_ID }}
        TF_VAR_azurerm_client_secret: ${{ secrets.AZ_SERVICE_PRINCIPAL_SECRET }}
        TF_VAR_resource_group_name: ${{ vars.AZ_RESOURCE_GROUP_NAME }}
        TF_VAR_resource_group_location: ${{ vars.AZ_RESOURCE_GROUP_LOCATION }}
        TF_VAR_storage_account_name: ${{ vars.AZ_STORAGE_ACCOUNT_NAME }}
        TF_VAR_service_plan_name: ${{ vars.AZ_SERVICE_PLAN_NAME }}
        TF_VAR_linux_web_app_name: ${{ vars.AZ_LINUX_WEB_APP_NAME }}

    steps:

    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest compatible version of Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2.0.3
      with:
        terraform_version: ~>1.5

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      working-directory: ./terraform
      run: >- 
        terraform init 
        -backend-config="subscription_id=${{ vars.AZ_SUBSCRIPTION_ID }}"
        -backend-config="tenant_id=${{ vars.AZ_TENANT_ID }}"
        -backend-config="client_id=${{ vars.AZ_SERVICE_PRINCIPAL_APP_ID }}"
        -backend-config="client_secret=${{ secrets.AZ_SERVICE_PRINCIPAL_SECRET }}"
        -backend-config="resource_group_name=${{ vars.AZ_RESOURCE_GROUP_NAME }}"
        -backend-config="storage_account_name=${{ vars.AZ_STORAGE_ACCOUNT_NAME }}"

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      working-directory: ./terraform
      run: terraform fmt -check

    # Import newly created prerrequisite resources
    - name: Terraform Import Resource Group
      if: ${{needs.deploy_prerrequisites.outputs.resource_group_created}}
      working-directory: ./terraform
      run: terraform import azurerm_resource_group.rg /subscriptions/${{ vars.AZ_SUBSCRIPTION_ID }}/resourceGroups/${{ vars.AZ_RESOURCE_GROUP_NAME }}
    - name: Terraform Import Storage Account
      if: ${{needs.deploy_prerrequisites.outputs.storage_account_created}}
      working-directory: ./terraform
      run: terraform import azurerm_storage_account.st /subscriptions/${{ vars.AZ_SUBSCRIPTION_ID }}/resourceGroups/${{ vars.AZ_RESOURCE_GROUP_NAME }}/providers/Microsoft.Storage/storageAccounts/${{ vars.AZ_STORAGE_ACCOUNT_NAME }}
    - name: Terraform Import Storage Container
      if: ${{needs.deploy_prerrequisites.outputs.storage_container_created}}
      working-directory: ./terraform
      run: terraform import azurerm_storage_container.tfstate https://${{ vars.AZ_STORAGE_ACCOUNT_NAME }}.blob.core.windows.net/tfstate

    # Update infrastructure according to Terraform configuration files
    - name: Terraform Apply
      working-directory: ./terraform
      run: terraform apply -auto-approve -input=false